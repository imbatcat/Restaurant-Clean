// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurants.Infrastructure.Persistence;

#nullable disable

namespace Restaurants.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    partial class RestaurantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KiloCalories")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ratione dolorem quia magni eos ipsa quaerat quo quia dolorum.",
                            Name = "Rustic Plastic Chips",
                            Price = 85.604326347552255m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Aliquid est impedit.",
                            KiloCalories = 811,
                            Name = "Fantastic Fresh Shirt",
                            Price = 34.621881233606565m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ea inventore dolore repudiandae facilis sit id.",
                            KiloCalories = 453,
                            Name = "Rustic Soft Table",
                            Price = 21.862858023814540m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Doloremque et odit sit magni.",
                            KiloCalories = 207,
                            Name = "Generic Metal Mouse",
                            Price = 16.667856845380370m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Officiis repellendus reiciendis corrupti doloribus et consectetur.",
                            Name = "Incredible Plastic Chicken",
                            Price = 38.15240753078040m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Enim voluptatem ea et est nemo repudiandae aut voluptatibus laboriosam.",
                            KiloCalories = 770,
                            Name = "Gorgeous Metal Shoes",
                            Price = 53.412204589055475m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Id vitae beatae est sapiente iure debitis optio.",
                            KiloCalories = 333,
                            Name = "Tasty Metal Pants",
                            Price = 10.7983368386991415m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Quisquam qui et ad sit dicta necessitatibus.",
                            KiloCalories = 808,
                            Name = "Awesome Soft Hat",
                            Price = 51.142260460253530m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Rem omnis enim harum sit provident delectus perferendis.",
                            KiloCalories = 405,
                            Name = "Intelligent Granite Bike",
                            Price = 14.0563118615687740m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Iste dolores error soluta adipisci velit.",
                            Name = "Handcrafted Metal Pants",
                            Price = 59.496639762227525m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "Enim ad quia eum hic fuga.",
                            KiloCalories = 289,
                            Name = "Sleek Soft Keyboard",
                            Price = 72.376484666095630m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "Aut asperiores culpa voluptates blanditiis.",
                            KiloCalories = 881,
                            Name = "Intelligent Frozen Chicken",
                            Price = 44.706719647735960m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 13,
                            Description = "Aut accusamus eos blanditiis animi neque eos soluta assumenda.",
                            KiloCalories = 706,
                            Name = "Small Granite Car",
                            Price = 30.850574953104420m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 14,
                            Description = "Sed sint aperiam impedit et cumque consequatur explicabo.",
                            KiloCalories = 627,
                            Name = "Gorgeous Frozen Ball",
                            Price = 87.395816379764170m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 15,
                            Description = "Earum perferendis ea ipsam facilis.",
                            KiloCalories = 618,
                            Name = "Ergonomic Metal Mouse",
                            Price = 47.132388483151610m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 16,
                            Description = "Voluptatum quaerat et eaque eius.",
                            KiloCalories = 115,
                            Name = "Fantastic Concrete Shirt",
                            Price = 66.476874976474960m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 17,
                            Description = "Voluptas fugit mollitia rerum voluptatibus illo expedita aliquam.",
                            Name = "Ergonomic Steel Mouse",
                            Price = 89.715635766281735m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 18,
                            Description = "Libero nesciunt non reprehenderit porro facilis consequatur rem libero.",
                            KiloCalories = 834,
                            Name = "Licensed Cotton Mouse",
                            Price = 88.785283086101440m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 19,
                            Description = "Tempore quis quo quia optio est et numquam deserunt dolorem.",
                            Name = "Ergonomic Soft Salad",
                            Price = 70.665519814735370m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 20,
                            Description = "Aliquam voluptas omnis occaecati voluptate vel maiores commodi sit.",
                            KiloCalories = 508,
                            Name = "Handmade Granite Fish",
                            Price = 85.37638331973920m,
                            RestaurantId = 5
                        });
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDelivery")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Japanese",
                            ContactEmail = "Justus.Weimann48@hotmail.com",
                            Contactnumber = "947-415-2087",
                            Description = "Eum non qui. Enim minima a eligendi mollitia explicabo delectus blanditiis voluptas ipsum. Accusamus tempora odio cupiditate esse itaque sed consequatur error.",
                            HasDelivery = false,
                            Name = "Kunze - Kuhn",
                            OwnerId = "8c19f413-f040-4142-a7dc-3b369e46aaeb"
                        },
                        new
                        {
                            Id = 2,
                            Category = "American",
                            ContactEmail = "Ophelia_Dooley90@yahoo.com",
                            Contactnumber = "1-338-278-6024",
                            Description = "Amet laboriosam consequuntur vel qui sed et qui nostrum maxime. Dicta aperiam ducimus ratione doloremque. Ullam eligendi nemo.",
                            HasDelivery = true,
                            Name = "Veum - Dooley",
                            OwnerId = "8c19f413-f040-4142-a7dc-3b369e46aaeb"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Italian",
                            ContactEmail = "Ethan_Gibson@gmail.com",
                            Contactnumber = "(810) 957-6828",
                            Description = "Quisquam aspernatur ex sequi natus repudiandae. Nam unde est. Nam voluptates itaque alias non deserunt. Quia voluptatem qui. Praesentium unde odit ipsum provident iste molestiae velit.",
                            HasDelivery = false,
                            Name = "Kuhic, Hilpert and Runolfsdottir",
                            OwnerId = "8c19f413-f040-4142-a7dc-3b369e46aaeb"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Chinese",
                            ContactEmail = "Maeve.Brown@gmail.com",
                            Contactnumber = "758-651-2836 x6474",
                            Description = "Neque facilis aut quia inventore. Adipisci consequatur et ad. In aut est voluptatibus omnis totam suscipit ipsum. Blanditiis officia vitae et ut. Ullam quis hic eum repellat quidem quo. At expedita sunt molestiae quas saepe.",
                            HasDelivery = false,
                            Name = "Champlin, Baumbach and Johns",
                            OwnerId = "8c19f413-f040-4142-a7dc-3b369e46aaeb"
                        },
                        new
                        {
                            Id = 5,
                            Category = "American",
                            ContactEmail = "Vern.Cole@gmail.com",
                            Contactnumber = "(448) 218-0960 x18433",
                            Description = "Beatae repellendus iure voluptatibus dignissimos autem et ut natus qui. Est aperiam fugiat. Amet quia quia sint consequatur aut et ducimus. Quam aut qui pariatur velit nesciunt est ex aut.",
                            HasDelivery = true,
                            Name = "Torp Group",
                            OwnerId = "8c19f413-f040-4142-a7dc-3b369e46aaeb"
                        });
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Restaurants.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Restaurants.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurants.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Restaurants.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.Dish", b =>
                {
                    b.HasOne("Restaurants.Domain.Entities.Restaurant", null)
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("Restaurants.Domain.Entities.User", "Owner")
                        .WithMany("OwnedRestaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Restaurants.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("RestaurantId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");

                            b1.HasData(
                                new
                                {
                                    RestaurantId = 1,
                                    City = "Schadenside",
                                    PostalCode = "74817-0282",
                                    Street = "834 Loraine Rue"
                                },
                                new
                                {
                                    RestaurantId = 2,
                                    City = "New Prudencemouth",
                                    PostalCode = "11385-0140",
                                    Street = "36401 Senger Path"
                                },
                                new
                                {
                                    RestaurantId = 3,
                                    City = "Keatontown",
                                    PostalCode = "22076-3754",
                                    Street = "179 Cormier Spurs"
                                },
                                new
                                {
                                    RestaurantId = 4,
                                    City = "South Monicahaven",
                                    PostalCode = "14363",
                                    Street = "76993 Senger Trail"
                                },
                                new
                                {
                                    RestaurantId = 5,
                                    City = "Sengershire",
                                    PostalCode = "09327",
                                    Street = "17747 Alysha Cliffs"
                                });
                        });

                    b.Navigation("Address");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Restaurants.Domain.Entities.User", b =>
                {
                    b.Navigation("OwnedRestaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
